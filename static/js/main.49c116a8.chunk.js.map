{"version":3,"sources":["assets/logo.png","assets/spinner.gif","components/Header.jsx","effects/useFetch.jsx","components/CharacterItem.jsx","components/Spinner.jsx","components/CharactersGrid.jsx","components/SearchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","useFetch","url","useState","cast","setCast","isLoading","setIsLoading","useEffect","a","axios","get","result","data","alert","fetchData","CharacterItem","character","img","name","portrayed","nickname","birthday","status","Spinner","Loader","style","display","width","margin","CharactersGrid","map","key","char_id","SearchBox","handleSubmit","text","setText","type","placeholder","value","autoFocus","onChange","e","target","App","searchQuery","setQuery","query","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,qKCU5BC,EARA,WACX,OACI,4BAAQC,UAAU,UACd,yBAAKC,IAAKC,IAAMC,IAAI,mB,yCCiBjBC,EAnBE,SAACC,GAAS,IAAD,EACEC,mBAAS,IADX,mBACfC,EADe,KACTC,EADS,OAEYF,oBAAS,GAFrB,mBAEfG,EAFe,KAEJC,EAFI,KAgBtB,OAZAC,qBAAU,YACS,uCAAG,4BAAAC,EAAA,+EAEWC,IAAMC,IAAIT,GAFrB,OAEJU,EAFI,OAGVP,EAAQO,EAAOC,MACfN,GAAa,GAJH,gDAMVO,MAAM,wBANI,yDAAH,qDASfC,KACD,CAACb,IACG,CAACE,OAAKE,cCYFU,EA7BO,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UACpB,OACI,yBAAKpB,UAAU,QACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,cACX,yBAAKC,IAAKmB,EAAUC,IAAKlB,IAAI,MAEjC,yBAAKH,UAAU,aACX,4BAAKoB,EAAUE,MACf,4BACI,4BACI,+CADJ,IACkCF,EAAUG,WAE5C,4BACI,6CADJ,IACgCH,EAAUI,UAE1C,4BACI,6CADJ,IACgCJ,EAAUK,UAE1C,4BACI,2CADJ,IAC8BL,EAAUM,a,iBCdjDC,EANC,WACZ,OACI,yBAAK1B,IAAK2B,IAAQzB,IAAI,aAAa0B,MAAO,CAACC,QAAQ,QAAQC,MAAM,MAAMC,OAAO,eCWvEC,EAXQ,SAAC,GAAsB,IAArBxB,EAAoB,EAApBA,UAAUF,EAAU,EAAVA,KAC/B,OAAOE,EAAW,kBAAC,EAAD,MAClB,6BAAST,UAAU,SAEXO,EAAK2B,KAAI,SAAAd,GAAS,OACd,kBAAC,EAAD,CAAee,IAAKf,EAAUgB,QAAShB,UAAWA,SCkBnDiB,EAxBG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAAkB,EACVhC,mBAAS,IADC,mBAC3BiC,EAD2B,KACrBC,EADqB,KAOlC,OACI,6BAASxC,UAAU,UACf,8BACI,2BACIyC,KAAK,SACLzC,UAAU,eACV0C,YAAY,oBACZC,MAAOJ,EACPK,WAAS,EACTC,SAbK,SAACC,GAClBN,EAAQM,EAAEC,OAAOJ,OACjBL,EAAaQ,EAAEC,OAAOJ,aCWfK,EAZH,WAAO,IAAD,EACgB1C,mBAAS,IADzB,mBACP2C,EADO,KACKC,EADL,OAEc9C,EAAS,sDAAD,OAAuD6C,IAAnF1C,EAFM,EAENA,KAAME,EAFA,EAEAA,UACd,OACI,yBAAKT,UAAU,aACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWsC,aAAc,SAACa,GAAD,OAASD,EAASC,MAC3C,kBAAC,EAAD,CAAgB1C,UAAWA,EAAWF,KAAMA,MCFpC6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.49c116a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3795f66d.png\";","module.exports = __webpack_public_path__ + \"static/media/spinner.235b9b3e.gif\";","import React from 'react';\nimport logo from \"../assets/logo.png\";\nconst Header = () => {\n    return (\n        <header className=\"center\">\n            <img src={logo} alt=\"Breaking-Bad\"/>\n        </header>\n    );\n};\n\nexport default Header;","import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst useFetch = (url) => {\n    const [cast, setCast] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const result = await axios.get(url);\n                setCast(result.data);\n                setIsLoading(false);\n            } catch (error) {\n                alert(\"Could not fetch Data\");\n            }\n        };\n        fetchData();\n    }, [url]);   // basically as url changes (which changes due to change in searchQuery, api call is made)\n    return {cast,isLoading};\n};\n\nexport default useFetch;\n","import React from 'react';\n\nconst CharacterItem = ({character}) => {\n    return (\n        <div className=\"card\">\n            <div className=\"card-inner\">\n                <div className=\"card-front\">\n                    <img src={character.img} alt=\"\" />\n                </div>\n                <div className=\"card-back\">\n                    <h1>{character.name}</h1>\n                    <ul>\n                        <li>\n                            <strong>Actor Name:</strong> {character.portrayed}\n                        </li>\n                        <li>\n                            <strong>Nickname:</strong> {character.nickname}\n                        </li>\n                        <li>\n                            <strong>Birthday:</strong> {character.birthday}\n                        </li>\n                        <li>\n                            <strong>Status:</strong> {character.status}\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default CharacterItem;","import React from 'react';\nimport Loader from \"../assets/spinner.gif\";\nconst Spinner = () => {\n    return (\n        <img src={Loader} alt=\"Loading...\" style={{display:\"block\",width:\"20%\",margin:\"10% auto\"}}/>\n    );\n};\n\nexport default Spinner;","import React from 'react'\nimport CharacterItem from './CharacterItem';\nimport Spinner from './Spinner';\n\nconst CharactersGrid = ({isLoading,cast}) => {\n    return isLoading?(<Spinner />):( \n    <section className=\"cards\">\n        {\n            cast.map(character=>(\n                <CharacterItem key={character.char_id} character={character} />\n            ))\n        }\n    </section>)\n}\n\nexport default CharactersGrid;\n","import React from \"react\";\nimport { useState } from \"react\";\n\nconst SearchBox = ({handleSubmit}) => {\n    const [text, setText] = useState(\"\");\n\n    const handleChange = (e)=>{\n        setText(e.target.value);\n        handleSubmit(e.target.value);\n    }\n    return (\n        <section className=\"search\">\n            <form>\n                <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search Characters\"\n                    value={text}\n                    autoFocus\n                    onChange={handleChange}\n\n                />\n            </form>\n        </section>\n    );\n};\n\nexport default SearchBox;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport useFetch from \"./effects/useFetch\";\nimport CharactersGrid from \"./components/CharactersGrid\";\nimport SearchBox from \"./components/SearchBox\";\n\nconst App = () => {\n    const [searchQuery,setQuery]= useState(\"\");\n    const { cast, isLoading } = useFetch(`https://www.breakingbadapi.com/api/characters?name=${searchQuery}`);\n    return (\n        <div className=\"container\">\n            <Header />\n            <SearchBox handleSubmit={(query)=>setQuery(query)} />\n            <CharactersGrid isLoading={isLoading} cast={cast} />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}